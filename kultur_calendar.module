<?php

/**
 * @file
 * Code for the KulturÃ˜en Calendar feature.
 */

include_once 'kultur_calendar.features.inc';
module_load_include('inc', 'kultur_calendar', 'kultur_calendar.events');

/**
 * Implements hook_menu().
 */
function kultur_calendar_menu() {
  $items = [];

  $items['kalender'] = [
    'title' => 'KulturÃ˜en Calendar',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['kultur_calendar'],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  $items['kalender/events'] = [
    'title' => 'Retreives events for libraries',
    'page callback' => 'kultur_calendar_events_get',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  ];
  $items['kalender/day'] = [
    'title' => 'Get data for one day',
    'page callback' => 'kultur_calendar_events_day_load',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
    'delivery callback' => 'drupal_json_output',
  ];
  return $items;
}

/**
 * Render Full page calendar.
 *
 * @return array
 *   Form elements.
 */
function kultur_calendar($form, &$form_state) {
  $path = drupal_get_path('module', 'kultur_calendar');
  try {
    $libraries_queue = nodequeue_load_queue_by_name('kultur_libraries');
    $libraries_sub_queue = nodequeue_load_subqueues_by_queue($libraries_queue->qid);
    $libraries_sub_queue = reset($libraries_sub_queue);
    $libraries = _kultur_calendar_get_libraries($libraries_sub_queue);

    $query = db_select('node', 'n');

    $query->fields('n', ['nid', 'title'])
      ->condition('n.type', 'ding_library')
      ->condition('n.status', '1')
      ->condition('n.nid', $libraries, 'IN');
    $query->leftJoin('nodequeue_nodes', 'nn', 'n.nid = nn.nid');
    $query->condition('nn.sqid', $libraries_sub_queue->sqid)
      ->orderBy('nn.position');

    $libraries = $query->execute()->fetchAllKeyed();
  }
  catch (Exception $e) {
    drupal_set_message();
  }

  $libraries['other'] = t('Other actors');

  $form['libraries'] = [
    '#type' => 'checkboxes',
    '#options' => $libraries,
    '#default_value' => array_keys($libraries),
    '#id' => drupal_html_id('kultur-libraries'),
    '#suffix' => '
      <div id="kultur_calendar"></div>
        <div id="kultur_calendar-day" class="hidden"></div>
      ',
    '#attached' => [
      'js' => [
        [
          'data' => 'https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js',
          'type' => 'external',
        ],
        [
          'data' => 'https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.min.js',
          'type' => 'external',
        ],
        [
          'data' => 'https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/locale-all.js',
          'type' => 'external',
        ],
        [
          'data' => $path . '/js/kultur_calendar.js',
        ],
        [
          'data' => [
            'events' => [],
          ],
          'type' => 'setting',
        ],
      ],
      'css' => [
        [
          'data' => 'https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.4.0/fullcalendar.css',
          'type' => 'external',
        ],
        ['data' => $path . '/css/kultur_calendar.css'],
      ],
    ],
  ];

  return $form;
}

/**
 * Get events sum based for each library based on the period.
 *
 * @return array
 *   Set of event numbers grouped by library.
 */
function kultur_calendar_events_get() {
  $events = [];
  $start = $_GET['start'];
  $end = $_GET['end'];
  if (!empty($start) && !empty($end)) {
    $events = kultur_calendar_get_events($start, $end);
  }

  return $events;
}

/**
 * Load single event for each library.
 *
 * This function is called on the popup display.
 *
 * @return array
 *   Set of events in a given day.
 */
function kultur_calendar_events_day_load() {
  $events = [];
  if (!empty($_GET['date'])) {
    $date = date_create_from_format('Y-m-d', $_GET['date']);
    $date = $date->getTimestamp();
    $date = format_date($date, 'ding_event_lists_date');

    $did = kultur_calendar_get_domain_id();
    $timezone = date_default_timezone_get();

    $libraries_queue = nodequeue_load_queue_by_name('kultur_libraries');
    $libraries_sub_queue = nodequeue_load_subqueues_by_queue($libraries_queue->qid);
    $libraries_sub_queue = reset($libraries_sub_queue);
    $libraries = _kultur_calendar_get_libraries($libraries_sub_queue);
    $events[$date] = kultur_calendar_get_day_libraries_events($_GET['date'], $did, $libraries, $libraries_sub_queue->sqid, $timezone);

    $other_queue = nodequeue_load_queue_by_name('other_kultur_libraries');
    $other_sub_queue = nodequeue_load_subqueues_by_queue($other_queue->qid);
    $other_sub_queue = reset($other_sub_queue);
    $other_libraries = _kultur_calendar_get_libraries($other_sub_queue);
    $other = kultur_calendar_get_day_other_libraries_events($_GET['date'], $did, $other_libraries, $timezone);
    if ($other) {
      $events[$date][] = $other;
    }

    foreach ($events[$date] as &$event) {
      $day = kultur_calendar_get_day_events($_GET['date'], $event->lid, $did, $timezone);

      _kultur_calendar_format_event_time($day);

      $event->info = $day;
      $event->date = $_GET['date'];
    }
  }

  return $events;
}

/**
 * Proper format of the event date.
 */
function _kultur_calendar_format_event_time(&$day) {
  $timezone = date_default_timezone_get();
  $raw_start = new DateTime($day->start, new DateTimeZone($timezone));
  $raw_start = $raw_start->getTimestamp();

  $raw_end = new DateTime($day->end, new DateTimeZone($timezone));
  $raw_end = $raw_end->getTimestamp();

  $start = format_date($raw_start, 'kultur_time');
  $end = format_date($raw_end, 'kultur_time');

  if ($start == "0:00") {
    $day->start = t('All day');
    $day->end = '';
  }
  elseif ($raw_start != $raw_end) {
    $day->start = $start;
    $day->end = $end;
  }
  else {
    $day->start = $start;
    $day->end = '';
  }
}
